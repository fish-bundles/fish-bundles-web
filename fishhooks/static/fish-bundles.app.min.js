var CreateCtrl, MainCtrl, bundleMainTemplate, ctrl, markdownTemplate;

MainCtrl = (function() {
  function MainCtrl(test) {
    this.test = test;
  }

  return MainCtrl;

})();

ctrl = new MainCtrl("b");

markdownTemplate = "Introduction\n------------\n\nThis bundle does something cool.\n\nUsage\n-----\n\ninstall with fish-bundles by adding to your `fish-bundles-list.fish` file:\n\n    set -gx _fish_bundles_list $_fish_bundles_list '<user>/<bundle-name>'\n\nProvided Functions\n------------------\n\nThis bundle comes with the following functions:\n\n* does-something-nice - does something nice with the given $argv\n* does-other-thing - otherify the thingy in the filesystem";

bundleMainTemplate = "function my-function\n    echo Hello $argv\nend";

CreateCtrl = (function() {
  function CreateCtrl(element) {
    this.element = element;
    this.initializeCodeMirror();
    this.bindEvents();
  }

  CreateCtrl.prototype.initializeCodeMirror = function() {
    var el, extras;
    extras = {
      'F11': function(cm) {
        return cm.setOption("fullScreen", !cm.getOption("fullScreen"));
      },
      'Esc': function(cm) {
        if (cm.getOption("fullScreen")) {
          return cm.setOption("fullScreen", false);
        }
      }
    };
    el = $('.plugin-main-fish', this.element)[0];
    this.mainMirror = this.createCodeMirror(el, 'shell', extras, bundleMainTemplate);
    extras['Enter'] = 'newlineAndIndentContinueMarkdownList';
    el = $('.readme-md', this.element)[0];
    return this.readmeMirror = this.createCodeMirror(el, 'markdown', extras, markdownTemplate);
  };

  CreateCtrl.prototype.createCodeMirror = function(el, mode, extraKeys, value) {
    return CodeMirror(el, {
      mode: mode,
      lineNumbers: true,
      theme: 'monokai',
      extraKeys: extraKeys,
      styleActiveLine: true,
      value: value
    });
  };

  CreateCtrl.prototype.bindEvents = function() {
    this.elements = {
      name: this.element.find('#bundle-name'),
      category: this.element.find('#bundle-category'),
      warning: this.element.find('#duplicate-name')
    };
    return this.element.find('.create-bundle-button').bind('click', (function(_this) {
      return function(ev) {
        var obj;
        obj = {
          readme: _this.readmeMirror.getValue(),
          main: _this.mainMirror.getValue(),
          name: _this.elements.name.val(),
          category: _this.elements.category.val()
        };
        return _this.createNewBundle(obj);
      };
    })(this));
  };

  CreateCtrl.prototype.createNewBundle = function(obj) {
    this.elements.warning.hide();
    return $.ajax({
      type: "POST",
      url: '/save-bundle',
      data: {
        obj: JSON.stringify(obj)
      },
      success: (function(_this) {
        return function(result) {
          var resultObj;
          resultObj = JSON.parse(result);
          if (resultObj.result === 'duplicate_name') {
            _this.elements.warning.fadeIn();
            return;
          }
          return window.location = "/bundles/" + resultObj.slug;
        };
      })(this)
    });
  };

  return CreateCtrl;

})();

ctrl = new CreateCtrl($('.create-bundle'));
